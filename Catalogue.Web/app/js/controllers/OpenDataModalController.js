// Generated by IcedCoffeeScript 108.0.11
(function() {
  angular.module('app.controllers').controller('OpenDataModalController', function($scope, $http, $timeout) {
    var formatDate, publishingStatus, refreshAssessmentInfo, refreshSignOffInfo, refreshUploadInfo, useTwoDigits;
    formatDate = function(date) {
      var day, month, year;
      year = date.getFullYear();
      month = useTwoDigits(date.getMonth() + 1);
      day = useTwoDigits(date.getDate());
      return "" + day + "/" + month + "/" + year;
    };
    useTwoDigits = function(val) {
      if (val < 10) {
        return "0" + val;
      }
      return val;
    };
    $scope.assessmentRequest = {};
    $scope.assessmentRequest.id = $scope.form.id;
    publishingStatus = {
      riskAssessment: {
        currentClass: {},
        completed: {}
      },
      signOff: {
        currentClass: {},
        completed: {},
        timeout: {},
        showButton: {}
      },
      upload: {
        currentClass: {},
        completed: {}
      },
      currentActiveView: {}
    };
    $scope.publishingStatus = publishingStatus;
    publishingStatus.signOff.timeout = -1;
    $scope.refreshPublishingStatus = function() {
      publishingStatus.riskAssessment.completed = $scope.form.publication !== null && $scope.form.publication.openData.assessment.completed;
      publishingStatus.signOff.completed = $scope.form.publication !== null && $scope.form.publication.openData.signOff !== null;
      publishingStatus.upload.completed = $scope.form.publication !== null && $scope.form.publication.openData.lastSuccess !== null;
      if ($scope.isAssessedAndUpToDate($scope.form)) {
        publishingStatus.riskAssessment.currentClass = "visited";
      } else if (publishingStatus.riskAssessment.completed) {
        publishingStatus.riskAssessment.currentClass = "current";
      } else {
        publishingStatus.riskAssessment.currentClass = "current";
      }
      if ($scope.isSignedOffAndUpToDate($scope.form)) {
        publishingStatus.signOff.currentClass = "visited";
      } else if ($scope.isAssessedAndUpToDate($scope.form)) {
        publishingStatus.signOff.currentClass = "current";
      } else {
        publishingStatus.signOff.currentClass = "disabled";
      }
      if ($scope.isUploadedAndUpToDate($scope.form)) {
        return publishingStatus.upload.currentClass = "visited";
      } else if ($scope.isSignedOffAndUpToDate($scope.form)) {
        return publishingStatus.upload.currentClass = "current";
      } else {
        return publishingStatus.upload.currentClass = "disabled";
      }
    };
    $scope.refreshPublishingStatus();
    if ($scope.isSignedOffAndUpToDate($scope.form)) {
      publishingStatus.currentActiveView = "upload";
    } else if ($scope.isAssessedAndUpToDate($scope.form)) {
      publishingStatus.currentActiveView = "sign off";
    } else {
      publishingStatus.currentActiveView = "risk assessment";
    }
    refreshAssessmentInfo = function() {
      if ($scope.form.publication !== null && $scope.form.publication.openData.assessment.completed) {
        if ($scope.form.publication.openData.assessment.completedByUser === null && $scope.form.publication.openData.assessment.initialAssessmentWasDoneOnSpreadsheet) {
          return $scope.assessmentCompletedInfo = "Initial assessment completed on spreadsheet";
        } else if ($scope.isAssessedAndUpToDate($scope.form)) {
          return $scope.assessmentCompletedInfo = "Completed by " + $scope.form.publication.openData.assessment.completedByUser.displayName + " on " + moment(new Date($scope.form.publication.openData.assessment.completedOnUtc)).format('DD MMM YYYY h:mm a');
        } else {
          return $scope.assessmentCompletedInfo = "Last completed by " + $scope.form.publication.openData.assessment.completedByUser.displayName + " on " + moment(new Date($scope.form.publication.openData.assessment.completedOnUtc)).format('DD MMM YYYY h:mm a');
        }
      }
    };
    refreshSignOffInfo = function() {
      publishingStatus.signOff.showButton = $scope.user.isIaoUser && !$scope.isSignedOffAndUpToDate($scope.form);
      if ($scope.form.publication !== null && $scope.form.publication.openData.signOff !== null) {
        if ($scope.form.publication.openData.signOff.user === null) {
          $scope.signOffCompletedInfo = "Initial sign off completed on spreadsheet";
        } else if ($scope.isSignedOffAndUpToDate($scope.form)) {
          $scope.signOffCompletedInfo = "Signed off by " + $scope.form.publication.openData.signOff.user.displayName + " on " + moment(new Date($scope.form.publication.openData.signOff.dateUtc)).format('DD MMM YYYY h:mm a');
        } else {
          $scope.signOffCompletedInfo = "Last signed off by " + $scope.form.publication.openData.signOff.user.displayName + " on " + moment(new Date($scope.form.publication.openData.signOff.dateUtc)).format('DD MMM YYYY h:mm a');
        }
      }
      if ($scope.user.isIaoUser) {
        return publishingStatus.signOff.signOffButtonText = "SIGN OFF";
      } else {
        return publishingStatus.signOff.signOffButtonText = "Pending sign off";
      }
    };
    refreshUploadInfo = function() {
      if ($scope.form.publication !== null) {
        if ($scope.form.publication.openData.lastAttempt !== null) {
          $scope.uploadLastAttempted = moment(new Date($scope.form.publication.openData.lastAttempt.dateUtc)).format('DD MMM YYYY h:mm a');
        }
        if ($scope.form.publication.openData.lastSuccess !== null) {
          $scope.uploadLastSucceeded = moment(new Date($scope.form.publication.openData.lastSuccess.dateUtc)).format('DD MMM YYYY h:mm a');
        }
      }
      if ($scope.isUploadedAndUpToDate($scope.form)) {
        return $scope.uploadStatus = "Upload completed";
      } else {
        return $scope.uploadStatus = "Pending upload";
      }
    };
    refreshAssessmentInfo();
    refreshSignOffInfo();
    refreshUploadInfo();
    $scope.assessButtonClick = function() {
      return $http.put('../api/publishing/opendata/assess', $scope.assessmentRequest).success(function(result) {
        $scope.status.refresh();
        $scope.form = result.record;
        refreshAssessmentInfo();
        $scope.refreshPublishingStatus();
        return publishingStatus.currentActiveView = "sign off";
      })["catch"](function(error) {
        $scope.notifications.add(error.data.exceptionMessage);
        return $scope.$dismiss();
      });
    };
    $scope.signOffButtonClick = function() {
      if (publishingStatus.signOff.timeout === -1) {
        publishingStatus.signOff.timeout = 10;
        return $scope.allowGraceTime();
      } else {
        return $scope.cancelSignOff();
      }
    };
    $scope.submitSignOff = function() {
      $scope.signOffRequest = {
        id: $scope.form.id,
        comment: ""
      };
      return $http.put('../api/publishing/opendata/signoff', $scope.signOffRequest).success(function(result) {
        $scope.status.refresh();
        $scope.form = result.record;
        refreshSignOffInfo();
        $scope.refreshPublishingStatus();
        return publishingStatus.currentActiveView = "upload";
      })["catch"](function(error) {
        if (error.status === 401) {
          $scope.notifications.add("Unauthorised - not in valid sign off group");
        } else {
          $scope.notifications.add(error.data.exceptionMessage);
        }
        publishingStatus.signOff.timeout = -1;
        return $scope.$dismiss();
      });
    };
    $scope.allowGraceTime = function() {
      if (publishingStatus.signOff.timeout > 0) {
        publishingStatus.signOff.signOffButtonText = "Cancel " + ("0" + publishingStatus.signOff.timeout--).slice(-2);
        return $timeout($scope.allowGraceTime, 1000);
      } else if (publishingStatus.signOff.timeout === 0) {
        $timeout.cancel;
        return $scope.submitSignOff();
      }
    };
    $scope.cancelSignOff = function() {
      $timeout.cancel;
      publishingStatus.signOff.timeout = -1;
      return refreshSignOffInfo();
    };
    return $scope.close = function() {
      return $scope.$close($scope.form);
    };
  });

}).call(this);

//# sourceMappingURL=OpenDataModalController.js.map
